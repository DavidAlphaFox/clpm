#+TITLE: CLPM Bundle
#+AUTHOR: CLPM Developers
#+EMAIL: clpm-devel@common-lisp.net

This file describes the "bundle" capabilities of CLPM. Bundles are meant to ease
the problems of repeatable deployment and testing in the CL world - i.e.,
helping handle where the rubber meets the road. While ASDF famously does not
allow developers to specify upper bounds on dependency versions (only lower
bounds) [fn:1] [fn:2], CLPM's bundle capability allows exactly that, in addition
to specifying that some dependency should be satisfied by some unreleased
version directly from source control (great for developing projects in multiple
repos simultaneously!).

A CLPM bundle is a collection of systems locked at specific versions. A bundle
is fully defined by a =clpmfile.lock= file, which is itself created from a
=clpmfile= file. Once a lock file is generated, the bundle commands allow you to
perform tasks such as running Lisp processes that can load systems in the bundle
with zero configuration or helpers needed (other than ASDF, of course).

* Files
** clpmfile

   A =clpmfile= describes what projects or systems a user wants to place in a
   bundle and any constraints she has on the versions of those objects. It is a
   file, typically located at the root of a source code repository, that
   consists of a series of directives where each directive is a list starting
   with a keyword. The directives are described below. Additionally, the first
   directive in the file must be the ~:api-version~ directive. This document
   describes version ="0.1"=.

*** ~:api-version~

    This directive must be the first to appear in the file. It consists of one
    argument that must be a string naming the clpmfile version the rest of the
    file is described in. Example:

    #+begin_src common-lisp
      (:api-version "0.1")
    #+end_src

*** ~:source~

    Each clpmfile must include at least one source directive. This tells CLPM
    which sources it is allowed to search for dependencies in. The first
    argument to this directive is the name of the source as a string. The
    remainder is a plist describing the source. For example, to use the standard
    quicklisp distribution, you can write:

    #+begin_src common-lisp
      (:source "quicklisp"
       :type :quicklisp
       :url "https://beta.quicklisp.org/dist/quicklisp.txt"
       :force-https t)
    #+end_src

    All source directives must come immediately after the api-version directive.

*** ~:gitlab~

    The gitlab directive specifies a requirement that must be satisfied by a git
    repository hosted on a gitlab server. Unless specified otherwise, every
    explicitly defined system (and their dependencies) are included in the
    bundle.

    #+begin_src common-lisp
      (name &key (host "gitlab.com") repo branch commit tag systems)
    #+end_src

    + ~name~ :: must be a string, unique in the file.
    + ~:host~ :: is the hostname of the gitlab server. Defaults to gitlab.com.
    + ~:repo~ :: is a string naming the path to the repository.
    + ~:branch~ :: If specified, must be a string naming the branch to use. If
                   none of branch, commit, or tag are specified, the branch
                   defaults to the default branch from the server.
    + ~:commit~ :: If specified, must be a string naming the commit to use.
    + ~:tag~ :: If specified, must be a string naming the tag to use.
    + ~:systems~ :: A list naming the systems to require in the bundle. If NIL,
                    all explicitly defined systems are required.[fn:3]
*** ~:asd~

    This directive states that the specified asd file should be included in the
    bundle. The arguments it accepts are:

    #+begin_src common-lisp
      (asd-path &key systems)
    #+end_src

    + ~asd-path~ :: Must be a string providing the path to the asd file,
                    relative to the clpmfile.
    + ~systems~ :: What systems defined by the ASD file should be included. Must
                   be a list of strings. If NIL, then all systems explicitly
                   defined in the asd file are required and have their
                   dependencies satisfied.[fn:3]

** clpmfile.lock

   The lock file defines all releases included in the bundle. This consists of
   every top level requirement specified in the clpmfile and their
   dependencies. When the dependencies are resolved, any system fetched from
   source control is assumed to satisfy any requirements placed on it. No formal
   commitment to syntax for this file is guaranteed yet.


* Configuration

  Every bundle command reads the file =.clpm/bundle.conf= (if it exists,
  relative to the =clpmfile.lock=) and merges the configuration defined in that
  file into CLPM's central config. Currently, all configuration sections are
  merged, in a future version a whitelist of configuration options will be
  defined.

* Commands
** =clpm bundle install=

   If the lock file exists, load it and ensure that all releases included in the
   bundle are installed locally. If the lock file does not exist, create it and
   then ensure all releases are installed.

** =clpm bundle exec=

   Execute the specified command (following =exec=) in an environment where ASDF
   will have access to all systems included in the bundle with no extra
   configuration. Requires the lock file to exist.

   All environment variables are passed on to the new process, additionally the
   following environment variables are set:

   + =CL_SOURCE_REGISTRY= :: Set to contain the parent folders of every .asd
        file in the bundle.
   + =CLPM_BUNDLE_BIN_PATH= :: Set to the path to the clpm executable.
   + =CLPM_BUNDLE_CLPMFILE= :: Set to the path to the clpmfile that defines the
        bundle.
   + =CLPM_BUNDLE_CLPMFILE_LOCK= :: Set to the path to the clpmfile.lock that
        defines the bundle.

** =clpm bundle update=

   Update the lock file to point to the latest versions available that satisfy
   the constraints in the =clpmfile=.

* Comparisons

  In the Common Lisp world, CLPM's bundle is most similar to [[https://github.com/fukamachi/qlot][Qlot]]. Unlike Qlot,
  however, CLPM has the following features:

  + Does not use the Quicklisp client under the hood.
  + Has no dependency on roswell for its command line executable.
  + Is distributed both as source and an executable.
  + Works harder to determine dependencies of systems fetched from git.
  + Allows for more complex version specifications in the clpmfile.
  + Allows for easily cloning remote repositories over HTTPS with
    authentication.

  Like Qlot, this portion of CLPM was heavily influenced by Ruby's bundler.

* Footnotes

[fn:1] https://bugs.launchpad.net/asdf/+bug/1183179

[fn:2] I personally didn't like this restriction at first, but upon much
reflection realized that Far√©'s argument made a lot of sense. That realization
was one of the impetuses to designing the bundle capabilities of CLPM.

[fn:3] Only the top level system of a package-inferred-system is considered to
be explicitly defined. If you require dependencies of subsystems that the top
level system does not depend on to be satisfied, you must list those systems
explicitly.
