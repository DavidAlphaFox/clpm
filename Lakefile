;;;; -*- mode: common-lisp; -*-
;;;; CLPM Lakefile (like make, but in Lisp!)
;;;;
;;;; This software is part of CLPM. See README.org for more information. See
;;;; LICENSE for license information.

(in-package :cl-user)
(defpackage :clpm/lake
  (:use :cl :lake :cl-syntax)
  (:shadowing-import-from :lake
                          :directory))
(in-package :clpm/lake)

(defvar *lakefile-truename* *load-truename*)

(use-syntax :interpol)

(defun clpm-version ()
  (asdf:component-version (asdf:find-system :clpm)))

(defun git-tag ()
  (uiop:run-program '("git" "describe" "--tags" "HEAD")
                    :output '(:string :stripped t)))

(defun docker-build (path
                     &key tag dockerfile context
                       iid-file)
  (uiop:run-program
   `("docker"
     ,@(when context
         `(#?"--context=${context}"))
     "build"
     ,@(when tag
         `("-t" ,tag))
     ,@(when dockerfile
         `("-f" ,dockerfile))
     ,@(when iid-file
         `("--iidfile" ,iid-file))
     ,path)
   :output :interactive
   :error-output :interactive
   :input :interactive))

(defun docker-create (image
                      &key cid-file context)
  (uiop:run-program
   `("docker"
     ,@(when context
         `(,#?"--context=${context}"))
     "create"
     ,@(when cid-file
         `("--cidfile" ,cid-file))
     ,image)
   :output :interactive
   :error-output :interactive
   :input :interactive))

(defun docker-cp (source-container source-path destination-path
                  &key context)
  (uiop:run-program
   `("docker"
     ,@(when context
         `(#?"--context=${context}"))
     "cp"
     ,#?"${source-container}:${source-path}"
     ,destination-path)
   :output :interactive
   :error-output :interactive
   :input :interactive))

(defun docker-rm (container
                  &key context)
  (uiop:run-program
   `("docker"
     ,@(when context
         `(#?"--context=${context}"))
     "rm"
     ,container)
   :output :interactive
   :error-output :interactive
   :input :interactive))

(defun build-clpm-with-docker (dockerfile destination)
  (uiop:with-temporary-file (:pathname iid-pn)
    (uiop:with-temporary-file (:pathname cid-pn)
      (uiop:delete-file-if-exists iid-pn)
      (uiop:delete-file-if-exists cid-pn)
      (docker-build "."
                    :dockerfile dockerfile
                    :iid-file (namestring iid-pn))
      (let ((iid (uiop:read-file-string iid-pn)))
        (docker-create iid
                       :cid-file (namestring cid-pn))
        (let ((cid (uiop:read-file-string cid-pn)))
          (docker-cp cid "/clpm/build/clpm.tar.gz" destination)
          (docker-rm cid))))))

(namespace "docker-build"
  (task "all" ("glibc" "musl"))

  (task "glibc-builder" ()
    (sh "docker build -f docker/Dockerfile.build-debian -t clpm/clpm-build:debian docker"))

  (task "musl-builder" ()
    (sh "docker build -f docker/Dockerfile.build-alpine -t clpm/clpm-build:alpine docker"))

  (task "glibc" ()
    (let ((output-dir (merge-pathnames "build/tarballs/"
                                       (uiop:getcwd))))
      (ensure-directories-exist output-dir)
      (build-clpm-with-docker "docker/Dockerfile.ubuntu"
                              (namestring (merge-pathnames #?"clpm-linux-gnu-${(git-tag)}.tar.gz"
                                                           output-dir)))))

  (task "musl" ()
    (let ((output-dir (merge-pathnames "build/tarballs/"
                                       (uiop:getcwd))))
      (ensure-directories-exist output-dir)
      (build-clpm-with-docker "docker/Dockerfile.alpine"
                              (namestring (merge-pathnames #?"clpm-linux-msul-${(git-tag)}.tar.gz"
                                                           output-dir))))))

(namespace "release"
  (task "all" ("files")
    (echo (git-tag)))

  (task "dir" ()
    (ensure-directories-exist (merge-pathnames #?"build/releases/${(git-tag)}/"
                                               (uiop:getcwd))))

  (task "files" ("dir")
    (uiop:delete-file-if-exists #?"build/releases/${(git-tag)}/clpm-${(git-tag)}.DIGESTS")
    (let ((files (uiop:directory* (merge-pathnames #?"build/tarballs/clpm-*-${(git-tag)}.tar.gz")))
          (release-dir (merge-pathnames #?"build/releases/${(git-tag)}/"
                                        (uiop:getcwd))))
      (loop
        :for file :in files
        :do (uiop:copy-file file (merge-pathnames (uiop:make-pathname*
                                                   :name (pathname-name file)
                                                   :type (pathname-type file))
                                                  release-dir)))
      (with-open-file (s #?"build/releases/${(git-tag)}/clpm-${(git-tag)}.DIGESTS"
                         :direction :output)
        (write-line "The SHA512 checksums of the following files are:" s)
        (terpri s))
      (loop
        :for file :in files
        :do
           (uiop:with-current-directory (#?"build/releases/${(git-tag)}/")
             (uiop:run-program (list "sha512sum"
                                     (namestring (uiop:make-pathname*
                                                  :name (pathname-name file)
                                                  :type (pathname-type file))))
                               :output #?"clpm-${(git-tag)}.DIGESTS"
                               :if-output-exists :append
                               :error-output :interactive
                               :input :interactive))))))

(task ("release") ("release:all"))

(task "docker-build" ("docker-build:all"))

(task "build" ()
  (sh "sbcl --load scripts/build.lisp"))

(task "package" ()
  (sh "/bin/sh package.sh"))

(task "all" ("build"))

(task "default" ("all"))
