;;;; -*- mode: common-lisp; -*-
;;;; CLPM Lakefile (like make, but in Lisp!)
;;;;
;;;; This software is part of CLPM. See README.org for more information. See
;;;; LICENSE for license information.

(in-package :cl-user)
(defpackage :clpm/lake
  (:use :cl :lake :cl-syntax)
  (:shadowing-import-from :lake
                          :directory))
(in-package :clpm/lake)

(defvar *lakefile-truename* *load-truename*)

(use-syntax :interpol)



(defun clpm-version ()
  (asdf:component-version (asdf:find-system :clpm)))

(defun git-tag ()
  (uiop:run-program '("git" "describe" "--tags" "HEAD")
                    :output '(:string :stripped t)))


;; * Docker
;; ** Helper Functions

(defun docker-build (tuple path
                     &key tag dockerfile context
                       iid-file platform)

  (apply #'uiop:run-program
         `("docker"
           ,@(when context
               (list #?"--context=${context}"))
           "build"
           ,@(when platform
               `("--platform" ,platform))
           ,@(when tag
               `("-t" ,tag))
           ,@(when dockerfile
               `("-f" ,dockerfile))
           ,@(when iid-file
               `("--iidfile" ,iid-file))
           ,path)
         :output :interactive
         :error-output :interactive
         :input :interactive

         (when (and (equal (second tuple) "windows")
                    (uiop:getenv "DOCKER_BUILDKIT"))
           ;; Docker on windows does not support buildkit yet, so disable it.
           (list :environment
                 (list* "DOCKER_BUILDKIT=0"
                        (sb-ext:posix-environ))))))

(defun docker-create (image
                      &key cid-file context)
  (uiop:run-program
   `("docker"
     ,@(when context
         (list #?"--context=${context}"))
     "create"
     ,@(when cid-file
         `("--cidfile" ,cid-file))
     ,image)
   :output :interactive
   :error-output :interactive
   :input :interactive))

(defun docker-cp (source-container source-path destination-path
                  &key context)
  (uiop:run-program
   `("docker"
     ,@(when context
         (list #?"--context=${context}"))
     "cp"
     ,#?"${source-container}:${source-path}"
     ,destination-path)
   :output :interactive
   :error-output :interactive
   :input :interactive))

(defun docker-rm (container
                  &key context)
  (uiop:run-program
   `("docker"
     ,@(when context
         (list #?"--context=${context}"))
     "rm"
     ,container)
   :output :interactive
   :error-output :interactive
   :input :interactive))

(defun build-clpm-with-docker (tuple &key dockerfile context platform)
  (let ((output-dir (merge-pathnames #?"build/releases/${(git-tag)}/"
                                     (uiop:getcwd))))
    (ensure-directories-exist output-dir)
    (uiop:with-temporary-file (:pathname iid-pn)
      (uiop:with-temporary-file (:pathname cid-pn)
        (uiop:delete-file-if-exists iid-pn)
        (uiop:delete-file-if-exists cid-pn)
        (docker-build tuple
                      "."
                      :dockerfile dockerfile
                      :context context
                      :platform platform
                      :iid-file (namestring iid-pn))
        (let ((iid (uiop:read-file-string iid-pn)))
          (docker-create iid
                         :cid-file (namestring cid-pn)
                         :context context)
          (let ((cid (uiop:read-file-string cid-pn)))
            (if (equal (second tuple) "windows")
                (docker-cp cid "/clpm/build/clpm.msi"
                           (namestring (merge-pathnames (format nil "clpm-~{~A~^-~}-~A.msi" tuple (git-tag))
                                                        output-dir))
                           :context context)
                (docker-cp cid "/clpm/build/clpm.tar.gz"
                           (namestring (merge-pathnames (format nil "clpm-~{~A~^-~}-~A.tar.gz" tuple (git-tag))
                                                        output-dir))
                           :context context))
            (docker-rm cid
                       :context context)))))))

;; ** Tasks

(defparameter *docker-default-config*
  '((("amd64" "linux" "gnu")
     :dockerfile "docker/Dockerfile.ubuntu")

    (("amd64" "linux" "musl")
     :dockerfile "docker/Dockerfile.alpine")

    (("amd64" "windows")
     :dockerfile "docker/Dockerfile.windows")

    (("armv7" "linux" "gnu")
     :dockerfile "docker/Dockerfile.ubuntu")

    (("armv7" "linux" "musl")
     :dockerfile "docker/Dockerfile.alpine")

    (("arm64" "linux" "gnu")
     :dockerfile "docker/Dockerfile.ubuntu")

    (("arm64" "linux" "musl")
     :dockerfile "docker/Dockerfile.alpine"))
  "Alist of tuples defining Docker containers that can be used to build CLPM
  that map to a plist of default options.")

(defvar *docker-config* nil
  "Stores the docker config computed at runtime from the
  .clpm-docker-build-config file.")

(defvar *docker-build-tasks* nil
  "A list of task names for building CLPM in Docker containers.")

(defun load-docker-build-config ()
  (when (probe-file ".clpm-docker-build-config")
    (let ((forms (uiop:read-file-forms ".clpm-docker-build-config")))
      (loop
        :for form :in forms
        :for default-form := (assoc (car form) *docker-default-config* :test #'equal)
        :when default-form
          :collect (cons (car form)
                         (append (cdr form) (cdr default-form)))))))

(setf *docker-config* (load-docker-build-config))

(defun make-docker-build-task (tuple)
  "Given a tuple, make a Lake task to build CLPM in the Docker container
specified by the tuple."
  (let ((task-name (format nil "docker-build-~{~A~^-~}" tuple)))
    `(progn
       (pushnew ,task-name *docker-build-tasks* :test #'equal)
       (task (,task-name) ()
         ,(format nil "Build CLPM in a docker container for ~{~A~^ ~}" tuple)
         (let* ((overrides-cell (assoc ',tuple *docker-config* :test #'equal))
                (plist (cdr overrides-cell))
                (default-plist (cdr (assoc ',tuple *docker-default-config*))))
           (when overrides-cell
             (apply #'build-clpm-with-docker ',tuple (append plist default-plist))))))))

(defmacro make-docker-build-tasks ()
  "Make tasks for all tuples defined in *DOCKER-DEFAULT-CONFIG*"
  `(progn
     ,@(loop
         :for f :in *docker-default-config*
         :collect (make-docker-build-task (car f)))))

(defmacro make-docker-parent-task ()
  "Make a Lake task that depends on all individual Docker build tasks."
  `(task ("docker-build") ,*docker-build-tasks*
     "Build CLPM using all configured Docker containers"
     t))

(make-docker-build-tasks)
(make-docker-parent-task)


;; * Releasing



(namespace "release"
  (task "all" ("files")
    "Prepare for release")

  (task "dir" ()
    "Ensure release directory exists"
    (ensure-directories-exist (merge-pathnames #?"build/releases/${(git-tag)}/"
                                               (uiop:getcwd))))

  (task "digests" ("dir")
    "Generate a digests file for every file in the release directory"
    (ensure-directories-exist (merge-pathnames #?"build/releases/${(git-tag)}/"
                                               (uiop:getcwd)))
    (uiop:delete-file-if-exists #?"build/releases/${(git-tag)}/clpm-${(git-tag)}.DIGESTS")
    (let ((files (uiop:directory* (merge-pathnames #?"build/releases/${(git-tag)}/*.*"))))
      (with-open-file (s #?"build/releases/${(git-tag)}/clpm-${(git-tag)}.DIGESTS"
                         :direction :output)
        (write-line "The SHA512 checksums of the following files are:" s)
        (terpri s))
      (loop
        :for file :in files
        :do
           (uiop:with-current-directory (#?"build/releases/${(git-tag)}/")
             (uiop:run-program (list "sha512sum"
                                     (namestring (uiop:make-pathname*
                                                  :name (pathname-name file)
                                                  :type (pathname-type file))))
                               :output #?"clpm-${(git-tag)}.DIGESTS"
                               :if-output-exists :append
                               :error-output :interactive
                               :input :interactive))))))

(task "build" ()
  "Build CLPM"
  (sh "sbcl --load scripts/build.lisp"))

(task "package" ()
  "Package CLPM"
  (sh "/bin/sh package.sh"))

(task "all" ("build"))

(task "default" ("all"))
